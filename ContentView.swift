import SwiftUI

struct ContentView: View {
    @StateObject private var foodTracker = FoodTracker()
    @State private var selectedTab = 0
    
    var body: some View {
        TabView(selection: $selectedTab) {
            // È¶ñÈ°µ - È•ÆÈ£ü‰ª™Ë°®Áõò
            HomeDashboardView()
                .tabItem {
                    Image(systemName: selectedTab == 0 ? "house.fill" : "house")
                    Text("È¶ñÈ°µ")
                }
                .tag(0)
            
            // ËÆ∞ÂΩï - ÂêÑÁßçËÆ∞ÂΩïÂäüËÉΩ
            RecordMainView()
                .tabItem {
                    Image(systemName: selectedTab == 1 ? "plus.circle.fill" : "plus.circle")
                    Text("ËÆ∞ÂΩï")
                }
                .tag(1)
            
            // È•≠Êê≠Â≠ê - Á§æ‰∫§ÂäüËÉΩ
            FoodBuddyView()
                .tabItem {
                    Image(systemName: selectedTab == 2 ? "person.2.fill" : "person.2")
                    Text("È•≠Êê≠Â≠ê")
                }
                .tag(2)
            
            // ÊàëÁöÑ - ‰∏™‰∫∫‰ø°ÊÅØÂíåËÆæÁΩÆ
            ProfileMainView()
                .tabItem {
                    Image(systemName: selectedTab == 3 ? "person.crop.circle.fill" : "person.crop.circle")
                    Text("ÊàëÁöÑ")
                }
                .tag(3)
        }
        .environmentObject(foodTracker)
        .accentColor(.blue)
        .preferredColorScheme(.light)
    }
}

// MARK: - È¶ñÈ°µ - È•ÆÈ£ü‰ª™Ë°®Áõò
struct HomeDashboardView: View {
    @EnvironmentObject var foodTracker: FoodTracker
    @State private var animateProgress: Bool = false
    
    var body: some View {
        NavigationView {
            ScrollView {
                LazyVStack(spacing: 24) {
                    // È°∂ÈÉ®ÈóÆÂÄôÂíåÂø´ÈÄüÁªüËÆ°
                    welcomeSection
                    
                    // ‰∏ªË¶ÅËê•ÂÖª‰ª™Ë°®Áõò
                    mainNutritionDashboard
                    
                    // Ëê•ÂÖªËØ¶ÊÉÖÂç°Áâá
                    nutritionDetailsGrid
                    
                    // ‰ªäÊó•È•ÆÈ£üËÆ∞ÂΩï
                    todayFoodRecords
                    
                    // ÂÅ•Â∫∑Êï∞ÊçÆÊ¶ÇËßà
                    healthDataOverview
                    
                    // OKRËøõÂ∫¶Â±ïÁ§∫
                    okrProgressSection
                }
                .padding(.horizontal, 20)
                .padding(.top, 10)
            }
            .onAppear {
                withAnimation(.easeInOut(duration: 1.0)) {
                    animateProgress = true
                }
                print("HomeDashboardView appeared - ÊªëÂä®Â∫îËØ•Ê≠£Â∏∏Â∑•‰Ωú")
            }
            .navigationTitle("ÂÅ•Â∫∑È•ÆÈ£ü")
            .background(
                LinearGradient(
                    colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.05)],
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
                .ignoresSafeArea()
            )
        }
    }
    
    private var welcomeSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("‰Ω†Â•ΩÔºå\(foodTracker.userProfile?.nickname ?? "Áî®Êà∑")")
                        .font(.title2)
                        .fontWeight(.bold)
                        .foregroundColor(.primary)
                    
                    Text("‰ªäÂ§©‰πüË¶ÅÂÅ•Â∫∑È•ÆÈ£üÂì¶ ‚ú®")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                // Â§¥ÂÉèÂç†‰ΩçÁ¨¶
                ZStack {
                    Circle()
                        .fill(
                            LinearGradient(
                                colors: [Color.blue.opacity(0.3), Color.purple.opacity(0.3)],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .frame(width: 60, height: 60)
                    
                    Text("üë§")
                        .font(.title2)
                }
            }
            
            // Âø´ÈÄüÁªüËÆ°Ê†è
            HStack(spacing: 16) {
                quickStatCard("üî•", "‰ªäÊó•Âç°Ë∑ØÈáå", "\(Int(foodTracker.todayCalories))", "kcal", .orange)
                quickStatCard("‚ö°", "ÂÆåÊàêÂ∫¶", "\(Int(foodTracker.calorieProgress * 100))", "%", .blue)
                quickStatCard("üéØ", "ÁõÆÊ†á", "\(Int(foodTracker.dailyCalorieTarget))", "kcal", .green)
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
    
    private func quickStatCard(_ emoji: String, _ title: String, _ value: String, _ unit: String, _ color: Color) -> some View {
        VStack(spacing: 4) {
            Text(emoji)
                .font(.title2)
            
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
            
            Text(value)
                .font(.headline)
                .fontWeight(.bold)
                .foregroundColor(color)
            
            Text(unit)
                .font(.caption2)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 12)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(color.opacity(0.1))
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(color.opacity(0.3), lineWidth: 1)
                )
        )
    }
    
    private var mainNutritionDashboard: some View {
        VStack(spacing: 20) {
            HStack {
                Text("Ëê•ÂÖª‰ª™Ë°®Áõò")
                    .font(.title3)
                    .fontWeight(.bold)
                    .foregroundColor(.primary)
                
                Spacer()
                
                Text("ÁõÆÊ†á: \(Int(foodTracker.dailyCalorieTarget)) kcal")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .padding(.horizontal, 12)
                    .padding(.vertical, 4)
                    .background(Color.gray.opacity(0.1))
                    .cornerRadius(8)
            }
            
            // ‰∏ªË¶ÅÂç°Ë∑ØÈáåËøõÂ∫¶ÁéØ
            ZStack {
                Circle()
                    .stroke(Color.blue.opacity(0.2), lineWidth: 12)
                    .frame(width: 160, height: 160)
                
                Circle()
                    .trim(from: 0, to: animateProgress ? foodTracker.calorieProgress : 0)
                    .stroke(
                        AngularGradient(
                            colors: [Color.blue, Color.purple, Color.blue],
                            center: .center
                        ),
                        style: StrokeStyle(lineWidth: 12, lineCap: .round)
                    )
                    .frame(width: 160, height: 160)
                    .rotationEffect(.degrees(-90))
                    .animation(.easeInOut(duration: 1.0), value: animateProgress)
                
                VStack(spacing: 4) {
                    Text("\(Int(foodTracker.calorieProgress * 100))%")
                        .font(.title)
                        .fontWeight(.bold)
                        .foregroundColor(.primary)
                    
                    Text("ÂÆåÊàê")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Text("\(Int(foodTracker.todayCalories)) / \(Int(foodTracker.dailyCalorieTarget))")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                }
            }
        }
        .padding(24)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
    
    private var nutritionDetailsGrid: some View {
        LazyVGrid(columns: Array(repeating: GridItem(.flexible(), spacing: 16), count: 2), spacing: 16) {
            nutritionCard("ü•©", "ËõãÁôΩË¥®", foodTracker.todayProtein, "g", .red, 80)
            nutritionCard("üçû", "Á¢≥Ê∞¥ÂåñÂêàÁâ©", foodTracker.todayCarbs, "g", .orange, 250)
            nutritionCard("ü•ë", "ËÑÇËÇ™", foodTracker.todayFat, "g", .yellow, 60)
            nutritionCard("üíß", "Ê∞¥ÂàÜ", 1800, "ml", .blue, 2000)
        }
    }
    
    private func nutritionCard(_ emoji: String, _ name: String, _ value: Double, _ unit: String, _ color: Color, _ target: Double) -> some View {
        VStack(spacing: 12) {
            Text(emoji)
                .font(.title)
            
            Text(name)
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
            
            Text("\(String(format: "%.1f", value))")
                .font(.title2)
                .fontWeight(.bold)
                .foregroundColor(color)
            
            Text(unit)
                .font(.caption2)
                .foregroundColor(.secondary)
            
            // Â∞èËøõÂ∫¶Êù°
            ProgressView(value: value / target)
                .progressViewStyle(LinearProgressViewStyle(tint: color))
                .scaleEffect(x: 1, y: 0.8)
        }
        .frame(height: 130)
        .frame(maxWidth: .infinity)
        .padding(16)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(color.opacity(0.1))
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke(color.opacity(0.3), lineWidth: 1)
                )
        )
    }
    
    private var todayFoodRecords: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("‰ªäÊó•È•ÆÈ£üËÆ∞ÂΩï")
                    .font(.title3)
                    .fontWeight(.bold)
                    .foregroundColor(.primary)
                
                Spacer()
                
                NavigationLink(destination: FoodRecordListView()) {
                    HStack(spacing: 4) {
                        Text("Êü•ÁúãÂÖ®ÈÉ®")
                            .font(.caption)
                        Image(systemName: "chevron.right")
                            .font(.caption)
                    }
                    .foregroundColor(.blue)
                    .padding(.horizontal, 12)
                    .padding(.vertical, 6)
                    .background(Color.blue.opacity(0.1))
                    .cornerRadius(8)
                }
            }
            
            if foodTracker.todayRecords.isEmpty {
                VStack(spacing: 12) {
                    ZStack {
                        Circle()
                            .fill(Color.gray.opacity(0.1))
                            .frame(width: 80, height: 80)
                        
                        Image(systemName: "fork.knife")
                            .font(.system(size: 30))
                            .foregroundColor(.gray)
                    }
                    
                    Text("‰ªäÂ§©ËøòÊ≤°ÊúâÈ•ÆÈ£üËÆ∞ÂΩï")
                        .font(.headline)
                        .foregroundColor(.primary)
                    
                    Text("ÁÇπÂáªËÆ∞ÂΩïÊåâÈíÆÂºÄÂßãËÆ∞ÂΩïÂêß")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .frame(height: 150)
                .frame(maxWidth: .infinity)
            } else {
                LazyVStack(spacing: 12) {
                    ForEach(foodTracker.todayRecords.prefix(3)) { record in
                        FoodRecordRow(record: record)
                            .background(
                                RoundedRectangle(cornerRadius: 12)
                                    .fill(Color.gray.opacity(0.05))
                            )
                    }
                }
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
    
    private var healthDataOverview: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("ÂÅ•Â∫∑Êï∞ÊçÆ")
                .font(.title3)
                .fontWeight(.bold)
                .foregroundColor(.primary)
            
            HStack(spacing: 16) {
                healthDataCard("üí™", "BMI", String(format: "%.1f", foodTracker.bmi), foodTracker.bmiCategory, .purple)
                healthDataCard("‚öñÔ∏è", "‰ΩìÈáç", "\(String(format: "%.1f", foodTracker.currentWeight))kg", "ÂΩìÂâç", .blue)
                healthDataCard("üë£", "Ê≠•Êï∞", "\(foodTracker.healthData?.steps ?? 0)", "‰ªäÊó•", .green)
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
    
    private func healthDataCard(_ emoji: String, _ title: String, _ value: String, _ subtitle: String, _ color: Color) -> some View {
        VStack(spacing: 8) {
            Text(emoji)
                .font(.title2)
            
            Text(title)
                .font(.caption)
                .foregroundColor(.secondary)
            
            Text(value)
                .font(.headline)
                .fontWeight(.bold)
                .foregroundColor(color)
            
            Text(subtitle)
                .font(.caption2)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
        .padding(.vertical, 16)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(color.opacity(0.1))
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(color.opacity(0.3), lineWidth: 1)
                )
        )
    }
    
    private var okrProgressSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("OKRËøõÂ∫¶")
                .font(.title3)
                .fontWeight(.bold)
                .foregroundColor(.primary)
            
            if let okr = foodTracker.okrProgress {
                VStack(alignment: .leading, spacing: 12) {
                    Text(okr.objective)
                        .font(.headline)
                        .fontWeight(.medium)
                        .foregroundColor(.primary)
                    
                    HStack {
                        Text(okr.quarter)
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Spacer()
                        
                        Text("Êï¥‰ΩìËøõÂ∫¶ \(Int(okr.progress * 100))%")
                            .font(.caption)
                            .foregroundColor(.blue)
                            .fontWeight(.medium)
                    }
                    
                    ZStack(alignment: .leading) {
                        RoundedRectangle(cornerRadius: 8)
                            .fill(Color.gray.opacity(0.2))
                            .frame(height: 8)
                        
                        RoundedRectangle(cornerRadius: 8)
                            .fill(
                                LinearGradient(
                                    colors: [Color.blue, Color.purple],
                                    startPoint: .leading,
                                    endPoint: .trailing
                                )
                            )
                            .frame(width: CGFloat(okr.progress) * 300, height: 8)
                            .animation(.easeInOut(duration: 1.0), value: animateProgress)
                    }
                    .frame(height: 8)
                    
                    VStack(spacing: 8) {
                        ForEach(okr.keyResults.prefix(2)) { keyResult in
                            HStack {
                                Text(keyResult.description)
                                    .font(.caption)
                                    .foregroundColor(.primary)
                                
                                Spacer()
                                
                                Text("\(String(format: "%.0f", keyResult.current))/\(String(format: "%.0f", keyResult.target))\(keyResult.unit)")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                    .fontWeight(.medium)
                            }
                        }
                    }
                }
            }
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 20)
                .fill(Color.white)
                .shadow(color: Color.black.opacity(0.1), radius: 10, x: 0, y: 5)
        )
    }
}

// MARK: - ËÆ∞ÂΩïÈ°µÈù¢‰∏ªËßÜÂõæ
struct RecordMainView: View {
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // È•ÆÈ£üËÆ∞ÂΩïÈÄâÈ°π
                    foodRecordOptions
                    
                    // ÂÖ∂‰ªñËÆ∞ÂΩïÈÄâÈ°π
                    otherRecordOptions
                }
                .padding()
            }
            .navigationTitle("ËÆ∞ÂΩï")
            .background(Color(.systemGray6))
        }
    }
    
    private var foodRecordOptions: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("È•ÆÈ£üËÆ∞ÂΩï")
                .font(.headline)
                .fontWeight(.semibold)
            
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 16) {
                recordOptionCard("ÊãçÁÖßËØÜÂà´", icon: "camera.fill", description: "ÊãçÁÖßËá™Âä®ËØÜÂà´È£üÁâ©", color: .blue) {
                    // ÊãçÁÖßËØÜÂà´ÂäüËÉΩ
                }
                
                recordOptionCard("ÈÄâÊã©Áõ∏ÂÜå", icon: "photo.fill", description: "‰ªéÁõ∏ÂÜåÈÄâÊã©ÁÖßÁâáËØÜÂà´", color: .green) {
                    // ÈÄâÊã©Áõ∏ÂÜåÂäüËÉΩ
                }
                
                recordOptionCard("Êù°ÂΩ¢Á†ÅËØÜÂà´", icon: "barcode.viewfinder", description: "Êâ´ÊèèÈ£üÂìÅÂåÖË£ÖÊù°ÂΩ¢Á†Å", color: .orange) {
                    // Êù°ÂΩ¢Á†ÅËØÜÂà´ÂäüËÉΩ
                }
                
                recordOptionCard("ÊâãÂ∑•ÂΩïÂÖ•", icon: "square.and.pencil", description: "ÊâãÂä®ËæìÂÖ•È£üÁâ©‰ø°ÊÅØ", color: .purple) {
                    // ÊâãÂ∑•ÂΩïÂÖ•ÂäüËÉΩ
                }
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(radius: 2)
    }
    
    private var otherRecordOptions: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("ÂÖ∂‰ªñËÆ∞ÂΩï")
                .font(.headline)
                .fontWeight(.semibold)
            
            VStack(spacing: 12) {
                recordListItem("ÊÉÖÁª™Êó•ËÆ∞", icon: "heart.fill", color: .pink) {
                    // ÊÉÖÁª™Êó•ËÆ∞ÂäüËÉΩ
                }
                
                recordListItem("ËøêÂä®ËÆ∞ÂΩï", icon: "figure.run", color: .green) {
                    // ËøêÂä®ËÆ∞ÂΩïÂäüËÉΩ
                }
                
                recordListItem("‰ΩìÈáçËÆ∞ÂΩï", icon: "scalemass.fill", color: .blue) {
                    // ‰ΩìÈáçËÆ∞ÂΩïÂäüËÉΩ
                }
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(radius: 2)
    }
    
    private func recordOptionCard(_ title: String, icon: String, description: String, color: Color, action: @escaping () -> Void) -> some View {
        Button(action: action) {
            VStack(spacing: 12) {
                Image(systemName: icon)
                    .font(.title)
                    .foregroundColor(color)
                
                Text(title)
                    .font(.headline)
                    .fontWeight(.medium)
                    .foregroundColor(.primary)
                
                Text(description)
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
            .frame(height: 120)
            .frame(maxWidth: .infinity)
            .background(color.opacity(0.1))
            .cornerRadius(12)
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private func recordListItem(_ title: String, icon: String, color: Color, action: @escaping () -> Void) -> some View {
        Button(action: action) {
            HStack {
                Image(systemName: icon)
                    .font(.title2)
                    .foregroundColor(color)
                    .frame(width: 30)
                
                Text(title)
                    .font(.headline)
                    .foregroundColor(.primary)
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .padding()
            .background(Color(.systemGray6))
            .cornerRadius(8)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - È•≠Êê≠Â≠êÈ°µÈù¢
struct FoodBuddyView: View {
    @EnvironmentObject var foodTracker: FoodTracker
    @State private var selectedSegment = 0
    
    var body: some View {
        NavigationView {
            VStack {
                // È°∂ÈÉ®ÂàÜÊÆµÊéßÂà∂
                Picker("", selection: $selectedSegment) {
                    Text("Âä®ÊÄÅ").tag(0)
                    Text("ÂàóË°®").tag(1)
                    Text("‰∏ªÈ°µ").tag(2)
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                
                // ÂÜÖÂÆπÂå∫Âüü
                Group {
                    switch selectedSegment {
                    case 0:
                        buddyFeedView
                    case 1:
                        buddyListView
                    default:
                        buddyHomeView
                    }
                }
            }
            .navigationTitle("È•≠Êê≠Â≠ê")
        }
    }
    
    private var buddyFeedView: some View {
        ScrollView {
            LazyVStack(spacing: 16) {
                ForEach(0..<5) { index in
                    VStack(alignment: .leading, spacing: 12) {
                        HStack {
                            Circle()
                                .fill(Color.blue)
                                .frame(width: 40, height: 40)
                            
                            VStack(alignment: .leading) {
                                Text("ÂÅ•Â∫∑Ëææ‰∫∫\(index + 1)")
                                    .font(.headline)
                                
                                Text("2Â∞èÊó∂Ââç")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            
                            Spacer()
                            
                            Button("ÂÖ≥Ê≥®") {
                                // ÂÖ≥Ê≥®ÂäüËÉΩ
                            }
                            .font(.caption)
                            .padding(.horizontal, 12)
                            .padding(.vertical, 6)
                            .background(Color.blue)
                            .foregroundColor(.white)
                            .cornerRadius(12)
                        }
                        
                        Text("‰ªäÂ§©ÁöÑÂçàÈ§êÂæàÂÅ•Â∫∑Âì¶Ôºå‰ΩéËÑÇÈ´òËõãÁôΩ üí™")
                            .font(.body)
                        
                        // Ê®°ÊãüÈ£üÁâ©ÂõæÁâá
                        Rectangle()
                            .fill(Color.gray.opacity(0.3))
                            .frame(height: 200)
                            .cornerRadius(8)
                        
                        HStack {
                            Button(action: {}) {
                                HStack {
                                    Image(systemName: "heart")
                                    Text("ÁÇπËµû")
                                }
                            }
                            
                            Button(action: {}) {
                                HStack {
                                    Image(systemName: "message")
                                    Text("ËØÑËÆ∫")
                                }
                            }
                            
                            Button(action: {}) {
                                HStack {
                                    Image(systemName: "square.and.arrow.up")
                                    Text("ÂàÜ‰∫´")
                                }
                            }
                            
                            Spacer()
                        }
                        .font(.caption)
                        .foregroundColor(.secondary)
                    }
                    .padding()
                    .background(Color.white)
                    .cornerRadius(12)
                    .shadow(radius: 2)
                }
            }
            .padding()
        }
        .background(Color(.systemGray6))
    }
    
    private var buddyListView: some View {
        ScrollView {
            LazyVStack {
                ForEach(foodTracker.foodBuddies) { buddy in
                    HStack {
                        Circle()
                            .fill(Color.blue)
                            .frame(width: 50, height: 50)
                        
                        VStack(alignment: .leading) {
                            Text(buddy.nickname)
                                .font(.headline)
                            
                            Text(buddy.bio)
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        
                        Spacer()
                        
                        Button(buddy.isFollowing ? "Â∑≤ÂÖ≥Ê≥®" : "ÂÖ≥Ê≥®") {
                            foodTracker.followFoodBuddy(buddy)
                        }
                        .font(.caption)
                        .padding(.horizontal, 12)
                        .padding(.vertical, 6)
                        .background(buddy.isFollowing ? Color.gray : Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                    }
                    .padding()
                    .background(Color.white)
                    .cornerRadius(8)
                }
            }
            .padding()
        }
        .background(Color(.systemGray6))
    }
    
    private var buddyHomeView: some View {
        ScrollView {
            VStack(spacing: 20) {
                // ÈÇÄËØ∑ÂäüËÉΩ
                inviteSection
                
                // ÊäÑ‰Ωú‰∏öÂäüËÉΩ
                copyHomeworkSection
            }
            .padding()
        }
        .background(Color(.systemGray6))
    }
    
    private var inviteSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("ÈÇÄËØ∑/Ê∑ªÂä†È•≠Êê≠Â≠ê")
                .font(.headline)
                .fontWeight(.semibold)
            
            Button("ÈÇÄËØ∑ÊúãÂèãÂä†ÂÖ•") {
                // ÈÇÄËØ∑ÂäüËÉΩ
            }
            .frame(maxWidth: .infinity)
            .padding()
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
            
            Button("ÊêúÁ¥¢Ê∑ªÂä†È•≠Êê≠Â≠ê") {
                // ÊêúÁ¥¢ÂäüËÉΩ
            }
            .frame(maxWidth: .infinity)
            .padding()
            .background(Color.green)
            .foregroundColor(.white)
            .cornerRadius(8)
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(radius: 2)
    }
    
    private var copyHomeworkSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("ÊäÑ‰Ωú‰∏ö")
                .font(.headline)
                .fontWeight(.semibold)
            
            Text("ÁúãÁúã‰ºòÁßÄÈ•≠Êê≠Â≠êÁöÑÈ•ÆÈ£üÊê≠ÈÖç")
                .font(.caption)
                .foregroundColor(.secondary)
            
            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 12) {
                ForEach(0..<4) { index in
                    VStack {
                        Rectangle()
                            .fill(Color.gray.opacity(0.3))
                            .frame(height: 100)
                            .cornerRadius(8)
                        
                        Text("ÂÅ•Â∫∑Êê≠ÈÖç \(index + 1)")
                            .font(.caption)
                            .fontWeight(.medium)
                    }
                    .padding(8)
                    .background(Color.white)
                    .cornerRadius(8)
                    .shadow(radius: 1)
                }
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(radius: 2)
    }
}

// MARK: - ÊàëÁöÑÈ°µÈù¢
struct ProfileMainView: View {
    @EnvironmentObject var foodTracker: FoodTracker
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 20) {
                    // Áî®Êà∑‰ø°ÊÅØÂç°Áâá
                    userInfoCard
                    
                    // ÂäüËÉΩËèúÂçï
                    functionalMenu
                }
                .padding()
            }
            .navigationTitle("ÊàëÁöÑ")
            .background(Color(.systemGray6))
        }
    }
    
    private var userInfoCard: some View {
        VStack(spacing: 16) {
            // Â§¥ÂÉèÂíåÂü∫Êú¨‰ø°ÊÅØ
            HStack {
                Circle()
                    .fill(Color.blue)
                    .frame(width: 80, height: 80)
                    .overlay(
                        Text("Â§¥ÂÉè")
                            .font(.caption)
                            .foregroundColor(.white)
                    )
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(foodTracker.userProfile?.nickname ?? "Áî®Êà∑ÊòµÁß∞")
                        .font(.title2)
                        .fontWeight(.bold)
                    
                    if let profile = foodTracker.userProfile {
                        Text("\(profile.gender.displayName) ‚Ä¢ \(Int(profile.height))cm ‚Ä¢ \(String(format: "%.1f", profile.weight))kg")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        
                        Text(profile.occupation.isEmpty ? "ËÅå‰∏öÊú™ËÆæÁΩÆ" : profile.occupation)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                
                Spacer()
            }
            
            // ‰ºöÂëòÁä∂ÊÄÅ
            HStack {
                Image(systemName: foodTracker.isVIPMember ? "crown.fill" : "crown")
                    .foregroundColor(foodTracker.isVIPMember ? .yellow : .gray)
                
                Text(foodTracker.isVIPMember ? "VIP‰ºöÂëò" : "ÊôÆÈÄöÁî®Êà∑")
                    .font(.caption)
                    .foregroundColor(foodTracker.isVIPMember ? .yellow : .secondary)
                
                Spacer()
                
                if !foodTracker.isVIPMember {
                    Button("ÂçáÁ∫ßVIP") {
                        // ÂçáÁ∫ßVIPÂäüËÉΩ
                    }
                    .font(.caption)
                    .padding(.horizontal, 12)
                    .padding(.vertical, 4)
                    .background(Color.blue)
                    .foregroundColor(.white)
                    .cornerRadius(8)
                }
            }
        }
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(radius: 2)
    }
    
    private var functionalMenu: some View {
        VStack(spacing: 12) {
            menuGroup("ÁõÆÊ†áÁÆ°ÁêÜ", items: [
                ("ÁõÆÊ†á", "target", { /* ÁõÆÊ†áËÆæÁΩÆ */ }),
                ("È•ÆÈ£üËÆ°Âàí", "list.bullet.clipboard", { /* È•ÆÈ£üËÆ°Âàí */ })
            ])
            
            menuGroup("‰ºöÂëòÊúçÂä°", items: [
                ("‰ºöÂëòËÆ¢ÈòÖ", "crown", { /* ‰ºöÂëòËÆ¢ÈòÖ */ })
            ])
            
            menuGroup("‰∏™‰∫∫‰ø°ÊÅØ", items: [
                ("Âü∫Êú¨‰ø°ÊÅØ", "person.circle", { /* Âü∫Êú¨‰ø°ÊÅØ */ }),
                ("Êô∫ËÉΩÁ°¨‰ª∂ÂØπÊé•", "applewatch", { /* Á°¨‰ª∂ÂØπÊé• */ })
            ])
            
            menuGroup("ËÆæÁΩÆ", items: [
                ("‰∏™‰∫∫‰ø°ÊÅØÊî∂ÈõÜÊ∏ÖÂçï", "list.bullet", { /* ‰ø°ÊÅØÊ∏ÖÂçï */ }),
                ("Á¨¨‰∏âÊñπ‰ø°ÊÅØÂÖ±‰∫´Ê∏ÖÂçï", "square.and.arrow.up", { /* ÂÖ±‰∫´Ê∏ÖÂçï */ }),
                ("ÂÖ≥‰∫éÊàë‰ª¨", "info.circle", { /* ÂÖ≥‰∫éÊàë‰ª¨ */ }),
                ("Ë¥¶Âè∑ÁôªÂá∫", "arrow.right.square", { /* ÁôªÂá∫ */ })
            ])
        }
    }
    
    private func menuGroup(_ title: String, items: [(String, String, () -> Void)]) -> some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(title)
                .font(.headline)
                .fontWeight(.semibold)
                .padding(.horizontal)
            
            VStack(spacing: 0) {
                ForEach(Array(items.enumerated()), id: \.offset) { index, item in
                    Button(action: item.2) {
                        HStack {
                            Image(systemName: item.1)
                                .font(.title3)
                                .foregroundColor(.blue)
                                .frame(width: 24)
                            
                            Text(item.0)
                                .font(.body)
                                .foregroundColor(.primary)
                            
                            Spacer()
                            
                            Image(systemName: "chevron.right")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .padding()
                        .background(Color.white)
                    }
                    .buttonStyle(PlainButtonStyle())
                    
                    if index < items.count - 1 {
                        Divider()
                            .padding(.leading, 56)
                    }
                }
            }
            .background(Color.white)
            .cornerRadius(12)
            .shadow(radius: 2)
        }
    }
}

// MARK: - ËæÖÂä©ËßÜÂõæ
struct FoodRecordRow: View {
    let record: FoodItem
    
    var body: some View {
        HStack {
            // È£üÁâ©ÂõæÊ†á
            Circle()
                .fill(Color.blue.opacity(0.2))
                .frame(width: 40, height: 40)
                .overlay(
                    Image(systemName: "fork.knife")
                        .foregroundColor(.blue)
                )
            
            VStack(alignment: .leading, spacing: 2) {
                Text(record.name)
                    .font(.headline)
                    .lineLimit(1)
                
                Text("\(record.portion) ‚Ä¢ \(String(format: "%.0f", record.nutrition.calories)) kcal")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Text(record.recordType.displayName)
                    .font(.caption2)
                    .padding(.horizontal, 6)
                    .padding(.vertical, 2)
                    .background(Color.blue.opacity(0.1))
                    .foregroundColor(.blue)
                    .cornerRadius(4)
            }
            
            Spacer()
            
            Text(DateFormatter.timeFormatter.string(from: record.timestamp))
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .padding(.vertical, 4)
    }
}

struct FoodRecordListView: View {
    @EnvironmentObject var foodTracker: FoodTracker
    
    var body: some View {
        List {
            ForEach(foodTracker.foodRecords) { record in
                FoodRecordRow(record: record)
            }
        }
        .navigationTitle("È•ÆÈ£üËÆ∞ÂΩï")
        .navigationBarTitleDisplayMode(.inline)
    }
}

extension DateFormatter {
    static let timeFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        return formatter
    }()
}

#Preview {
    ContentView()
} 